name: Deploy Aether to AWS ECS

on:
  push:
    branches: [ main ] # Trigger deployment only on push to main

env:
  # Use secrets for sensitive values
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  BACKEND_ECR_REPOSITORY: ${{ secrets.BACKEND_ECR_REPOSITORY }}
  FRONTEND_ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
  BACKEND_ECS_SERVICE_NAME: ${{ secrets.BACKEND_ECS_SERVICE_NAME }}
  FRONTEND_ECS_SERVICE_NAME: ${{ secrets.FRONTEND_ECS_SERVICE_NAME }}
  BACKEND_ECS_TASK_DEFINITION_FAMILY: ${{ secrets.BACKEND_ECS_TASK_DEFINITION_FAMILY }}
  FRONTEND_ECS_TASK_DEFINITION_FAMILY: ${{ secrets.FRONTEND_ECS_TASK_DEFINITION_FAMILY }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  FRONTEND_CONTAINER_NAME: ${{ secrets.FRONTEND_CONTAINER_NAME }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend_image_uri: ${{ steps.build-push-backend.outputs.backend_image_uri }}
      frontend_image_uri: ${{ steps.build-push-frontend.outputs.frontend_image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Backend image
        id: build-push-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as tag
        run: |
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "backend_image_uri=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Frontend image
        id: build-push-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "frontend_image_uri=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: build-and-push # Depends on the build job
    environment: production # Optional: Define a GitHub environment for protection rules

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Needed if task definition file is in repo

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Option 2 (Recommended): Download existing task def, update image, register new revision, update service
      - name: Download current backend task definition
        run: |
          aws ecs describe-task-definition --task-definition $BACKEND_ECS_TASK_DEFINITION_FAMILY \
          --query taskDefinition > task-definition-backend.json

      - name: Fill in new image ID in backend task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: ${{ env.BACKEND_CONTAINER_NAME }} # Main backend container
          image: ${{ needs.build-and-push.outputs.backend_image_uri }}
          # You might need another step or modification here if you need to update the Redis container too,
          # though the redis:7-alpine image rarely changes. Usually only app container needs update.

      - name: Deploy backend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.BACKEND_ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true # Wait for deployment to complete

  deploy-frontend:
    name: Deploy Frontend to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current frontend task definition
        run: |
          aws ecs describe-task-definition --task-definition $FRONTEND_ECS_TASK_DEFINITION_FAMILY \
          --query taskDefinition > task-definition-frontend.json

      - name: Fill in new image ID in frontend task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-frontend.json
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.frontend_image_uri }}

      - name: Deploy frontend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: ${{ env.FRONTEND_ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true